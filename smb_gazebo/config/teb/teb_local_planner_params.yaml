######################################################### teb_local_planner_tutorials #########################################################

TebLocalPlannerROS:

 #  odom_topic: "odom"
 #  map_frame: "map"
    
 # Trajectory
  
 teb_autosize: true
 dt_ref: 0.3 # (double, default: 0.3) 
 dt_hysteresis: 0.1 # (double, default: 0.1)
 max_samples: 500
 global_plan_overwrite_orientation: true ###
 allow_init_with_backwards_motion: false
#  Following the global plan is achieved by targeting a moving virtual goal
#  taken from intermediate global plan positions within the scope of the
#  local costmap (in particular a subset of the global plan with
#  length max_global_plan_lookahead_dist).
#  The local plan between the current robot position and
#  the virtual goal is subject to optimization, e.g.
#  to minimization of the transition time. If the robot
#  should prefer to follow the global plan instead of reaching
#  the (virtual) goal in minimum time, a first strategy
#  could be to significantly reduce max_global_plan_lookahead_dist.
#  But this approach is NOT recommended, since it reduces 
#  the prediction/planning horizon and weakens the capabilities
#  of avoiding obstacles . Instead, in order to account for global
#  path following, the teb_local_planner is able to
#  inject attractors (via-points) along the global plan (distance between attractors:
#  global_plan_viapoint_sep > 0 (Eg. 1.0),
#  attraction strength: weight_viapoint > 1 (Eg. 10.0)).
#  Use the publish point option in Rviz to set the via points.
 max_global_plan_lookahead_dist: 3.0
 global_plan_viapoint_sep: 1 ### -1
 global_plan_prune_distance: 1
 exact_arc_length: false
 feasibility_check_no_poses: 5
 publish_feedback: false
    
 # Robot
         
 max_vel_x: 1.1
 min_vel_x: -0.5
 max_vel_x_backwards: 1.1
 min_vel_x_backwards: -0.5
 max_vel_y: 0.0
 max_vel_theta: 1.1
 min_vel_theta: -0.5
 acc_lim_x: 0.5
 acc_lim_y: 0.0
 acc_lim_theta: 0.5
 min_turning_radius: 0.0 # diff-drive robot (can turn on place!)

 footprint_padding: 0.0
 footprint_model:
   type: "point"

 # GoalTolerance
    
 xy_goal_tolerance: 0.2
 yaw_goal_tolerance: 0.1
 free_goal_vel: false
 complete_global_plan: true
    
 # Obstacles
    
 min_obstacle_dist: 0.59 # (double, default: 0.5) < 0.6 This value must also include our robot radius, since footprint_model is set to "point".
 inflation_dist: 1.6 # (double, default: pre kinetic: 0.0, kinetic+: 0.6) 
 include_costmap_obstacles: true # (bool, default: true) 
 costmap_obstacles_behind_robot_dist: 1.0 #(double, default: 1.0)
 obstacle_poses_affected: 15 #(int, default: 30)

 dynamic_obstacle_inflation_dist: 1.6
 include_dynamic_obstacles: true

 costmap_converter_plugin: ""
 costmap_converter_spin_thread: true
 costmap_converter_rate: 5

 # Optimization
    
 no_inner_iterations: 5
 no_outer_iterations: 4
 optimization_activate: true
 optimization_verbose: false
 
 # One of the parameters for optimization that has considerable impact is penalty_epsilon.
 # As per documentation: http://wiki.ros.org/teb_local_planner
 # <name>/penalty_epsilon (double, default: 0.1)
 # Add a small safety margin to penalty functions for hard-constraint approximations
 # Teb local planner tends to get stuck is local minimum, by slightly incrementing this value, the behaviour may be avoided.
 # An excellent resource: https://wiki.ros.org/teb_local_planner/Tutorials
 penalty_epsilon: 0.1
 obstacle_cost_exponent: 4
 weight_max_vel_x: 2
 weight_max_vel_theta: 1
 weight_acc_lim_x: 1
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1000
 weight_kinematics_forward_drive: 1
 weight_kinematics_turning_radius: 1
 weight_optimaltime: 1 # must be > 0
 weight_shortest_path: 0
 weight_obstacle: 100
 weight_inflation: 0.2
 weight_dynamic_obstacle: 10
 weight_dynamic_obstacle_inflation: 0.2
 #  inject attractors (via-points) along the global plan (distance between attractors:
 #  global_plan_viapoint_sep > 0 (Eg. 1.0),
 #  attraction strength: weight_viapoint > 1 (Eg. 10.0)).
 #  Use the publish point option in Rviz to set the via points.
 weight_viapoint: 10 ### 1
 weight_adapt_factor: 2

 # Homotopy Class Planner

 enable_homotopy_class_planning: true
 enable_multithreading: true
 max_number_classes: 4
 selection_cost_hysteresis: 1.0
 selection_prefer_initial_plan: 0.9
 selection_obst_cost_scale: 100.0
 selection_alternative_time_cost: false
 
 roadmap_graph_no_samples: 15
 roadmap_graph_area_width: 5
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 0.5
 h_signature_threshold: 0.1
 obstacle_heading_threshold: 0.45
 switching_blocking_period: 0.0
 viapoints_all_candidates: true
 delete_detours_backwards: true
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: false
 visualize_with_time_as_z_axis_scale: false

# Recovery
 
 shrink_horizon_backup: true
 shrink_horizon_min_duration: 10
 oscillation_recovery: true
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10